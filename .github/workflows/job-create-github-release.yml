name: job-create-github-release
run-name: "[job-create-github-release] ${{ inputs.branch }} - ${{ inputs.versionSuffix || 'stable' }} - ${{ inputs.isPrerelease }}"

on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to checkout'
        required: true
        type: string
      versionSuffix:
        description: 'Suffix for the version/tag (e.g. canary-20250505-xxxx, or empty for stable)'
        required: false
        type: string
      isPrerelease:
        description: 'Is this a prerelease? (true/false)'
        required: true
        type: string
    secrets:
      BUN_VERSION:
        required: false
      KEY_SSH:
        required: true
      KEY_GPG:
        required: true
      GIT_EMAIL:
        required: true
      GH_TOKEN:
        required: true
    outputs:
      tag:
        value: ${{ jobs.release.outputs.tag }}
        description: 'The tag name of the release'
      changelog:
        value: ${{ jobs.release.outputs.changelog }}
        description: 'The changelog generated for the release'
      isPrerelease:
        value: ${{ jobs.release.outputs.isPrerelease }}
        description: 'Indicates if the release is a prerelease or not'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.name }}
      changelog: ${{ steps.changelog.outputs.content }}
      isPrerelease: ${{ inputs.isPrerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0
          ssh-key: ${{ secrets.KEY_SSH }}

      - name: Setup Bun Project
        uses: ./.github/actions/setup-bun-project
        with:
          bun-version: ${{ secrets.BUN_VERSION || 'latest' }}

      - name: Fetch Tags
        run: git fetch --tags --prune

      - name: Setup Git
        uses: ./.github/actions/setup-git
        with:
          gpg-key: ${{ secrets.KEY_GPG }}
          git-email: ${{ secrets.GIT_EMAIL }}

      - name: Get Previous Tag
        id: prev-tag
        run: |
          LAST=$(git tag --list 'v[0-9]*' --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -n1)
          echo "name=$LAST" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        run: |
          if [ -n "${{ steps.prev-tag.outputs.name }}" ]; then
            if [ -n "${{ inputs.versionSuffix }}" ]; then
              bunx changelogen@latest --from ${{ steps.prev-tag.outputs.name }} --bump --versionSuffix "${{ inputs.versionSuffix }}" --release
            else
              bunx changelogen@latest --from ${{ steps.prev-tag.outputs.name }} --bump --release
            fi
          else
            if [ -n "${{ inputs.versionSuffix }}" ]; then
              bunx changelogen@latest --bump --versionSuffix "${{ inputs.versionSuffix }}" --release
            else
              bunx changelogen@latest --bump --release
            fi
          fi

      - name: Sign Tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)
          if [ -z "$TAG" ]; then
            echo "No tags found, skipping signing step."
            exit 0
          fi
          echo "Signing tag: $TAG"
          git tag -s "$TAG" -m "Signed Release $TAG" --force

      - name: Push Tag
        run: git push origin HEAD:${{ inputs.branch }} --tags

      - name: Verify Tag Signature
        run: |
          TAG=$(git describe --tags --abbrev=0)
          git tag -v "$TAG"

      - name: Extract Tag
        id: tag
        run: echo "name=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Validate Tag Format
        run: |
          TAG="${{ steps.tag.outputs.name }}"
          echo "🔍 Validating tag format: $TAG"
          if ! echo "$TAG" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+'; then
            echo "❌ Tag format is invalid: $TAG (expected format: v1.2.3)"
            exit 1
          fi
          echo "✅ Tag format is valid: $TAG"

      - name: Extract Changelog
        id: changelog
        run: |
          PREV_COMMIT=$(git log -1 --pretty=%P | awk '{print $1}')
          git diff ${PREV_COMMIT} HEAD --unified=0 CHANGELOG.md | grep '^+' | grep -v '++' | sed 's/^+//' > temp.md
          echo "Changelog additions between previous and current commit:"
          cat temp.md
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat temp.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          TAG="${{ steps.tag.outputs.name }}"
          echo "Using tag: $TAG"
          
          if [ "${{ inputs.isPrerelease }}" = "true" ]; then
            gh release create "$TAG" \
              --title "Release $TAG" \
              --notes "$(cat temp.md)" \
              --prerelease \
              --latest
          else
            gh release create "$TAG" \
              --title "Release $TAG" \
              --notes "$(cat temp.md)" \
              --latest
          fi

      - name: Summary
        run: |
          tag="${{ steps.tag.outputs.name }}"
          release_url="https://github.com/${{ github.repository }}/releases/tag/$tag"
          release_name="Release $tag"
          
          # Determine channel type
          if [ "${{ inputs.isPrerelease }}" = "true" ]; then
            channel="Prerelease"
            status_icon="🚧"
          else
            channel="Stable"
            status_icon="✅"
          fi
          
          # Check GPG signature
          if git tag -v "$tag" 2>&1 | grep -q 'Good signature'; then
            signature="🔒 Signed (GPG verified)"
          else
            signature="❌ Not signed or invalid signature"
          fi
          
          message="$signature"
          
          {
            echo ""
            echo "## 🏷️ GitHub Release Summary"
            echo ""
            echo "| Release | Tag | Type | Status |"
            echo "|:--------|:----|:-----|:------:|"
            echo "| [$release_name]($release_url) | \`$tag\` | $channel | $status_icon |"
            echo ""
            echo "$message"
          } >> $GITHUB_STEP_SUMMARY
